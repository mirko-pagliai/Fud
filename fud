#!/bin/bash

CONFIGFILE="~/.fud/fud.conf"
LOGFILE="~/.fud/fud.log"
ICON="/usr/share/app-install/icons/fud.png"
MOUNTPOINT="/mnt/fud"

#Colors
RED="\e[1;31m" #Red
GREEN="\e[1;32m" #Green
YELLOW="\e[1;33m" #Yellow
RESET="\e[0m" #Reset!

# NOTA DA RIMUOVERE: questa è una semplice funzione di stampa. Per ora non fa nulla di particolarmente straordinario, ma potrebbe essere utilizzata più in là per sopprimere agevolmente l'output nel terminale, se passata un'opzione come -silent
# Print on screen
printScreen() { echo -e "$@"; }

# Test if software installation and server connection are ok
testStuff () {
	# Check if mount point is avaible
	if [[ ! -e $MOUNTPOINT ]]; then
		printScreen $RED"Error: "$RESET"mount point $MOUNTPOINT is not available. Type \`mkdir -p $MOUNTPOINT\` as root first, then restart this script";
		exit 1
	fi

	# Check if mount point is writable
	if [[ ! -w $MOUNTPOINT ]]; then
		printScreen $RED"Error: "$RESET"mount point $MOUNTPOINT is not writable. Type \`chmod -R 777 $MOUNTPOINT\` as root first, then restart this script";
		exit 1
	fi
	# Check if inotify is installed
	if ! which inotifywait &> /dev/null; then
		printScreen $RED"Error: "$RESET"install inotify-tools first, then restart this script"
		exit 1
	fi

	# Check if unison is installed
	if ! which unison &> /dev/null; then
		printScreen $RED"Error: "$RESET"install unison first, then restart this script";
		exit 1
	fi

	# Check if notify-send is installed
	if ! which notify-send &> /dev/null; then
		printScreen $RED"Error: "$RESET"install libnotify-bin first, then restart this script";
		exit 1
	fi

	# Check if user is in the fuse group
	if ! groups | grep "fuse" &> /dev/null; then
		printScreen $RED"Error: "$RESET"your user is not in the fuse group. Type \`addgroup $USER fuse\` as root first, then logout, login and restart this script";
		exit 1
	fi	
}

# Mount remote directory in /mnt/fud
mountRemote() {
	# If /mnt/fud is not already mounted
	if ! cat /proc/mounts | grep $MOUNTPOINT &> /dev/null; then
		# Check for ssh connection
		if [ "$METHOD" == "ssh" ]; then
			# Check if sshfs is installed
			if ! which sshfs &> /dev/null; then
				printScreen $RED"Error:"$RESET" install sshfs first, then restart this script";
				exit 1
			fi
			# Try to mount the remote directory with sshfs and verify 
			if ! sshfs $USER@$SERVER:$RPATH $MOUNTPOINT -p $PORT -C &> /dev/null; then
				printScreen $RED"Error:"$RESET" impossible to login to ssh server. Check your server configuration and your internet connection first, then restart the script"
			fi
		# Check for ftp connection
		elif [ "$METHOD" == "ftp" ]; then
			# Check if curlftpfs is installed
			if ! which curlftpfs &> /dev/null; then
				printScreen $RED"Error:"$RESET" install curlftpfs first, then restart this script";
				exit 1
			fi
			# Try to mount the remote directory with curlftpfs and verify
			if ! curlftpfs $SERVER:$PORT/$RPATH $MOUNTPOINT -o user=$USER:$PASSWORD -o allow_other -o nonempty &> /dev/null; then
				printScreen $RED"Error:"$RESET" impossible to login to ftp server. Check your server configuration and your internet connection first, then restart the script"
			fi
		fi
}

# Notify how many files have been synchronized
notifySinc() {
	# Controlla se almeno un file è stato sincronizzato
	if [[ "$1" -ge "1" ]]; then
		# Se un file (e uno solo è stato sincronizzato)
		if [[ "$1" -eq "1" ]]; then
			MESSAGE="$1 file have been synchronized"
		# Se è stato sincronizzato più di un file
		elif [[ "$1" -gt "1" ]]; then
			MESSAGE="$1 files have been synchronized"
		fi

		# Notifica il numero di file sincronizzati
		notify-send --icon=$ICON "$MESSAGE"
	fi
}

# Sync 
syncDir() {
	OUTPUT=$(unison $LPATH $MOUNTPOINT -logfile $LOGFILE $EXTRAOPTIONS -batch -auto -terse -confirmbigdel="false" -retry 3 2>&1)
	# SYNCFILES conterrà il numero di file sincronizzati
	SYNCFILES=$(echo `expr match "$OUTPUT" '.*\(([0-9]* item[s]* transferred\)'` | sed -n "s/(//g;s/item[s]* transferred//g;/[0-9]*/p")
	# Notice how many files have been synchronized
	notifySinc $SYNCFILES
}

# SCRIPT STARTS HERE
# Check if config file exists
if [[ -e $CONFIGFILE ]]; then
	# Include config file
	source $CONFIGFILE
	# Perform test
	testStuff

	# Mount remote directory and sync
	while :; do
		# Mount remote directory
		mountRemote
		# Finally, sync dirs
		syncDir
		while inotifywait -r -e modify -e create -e move -e delete -e open $LPATH $MOUNTPOINT &> /dev/null; do
			sleep 10
			syncDir
		done
		# Sleep if remote folder is not mounted or if the synchronization failed
		sleep 30
	done
	exit 0
# If config file doesn't exists
else
	printScreen $RED"Error: "$RESET"create and set "$CONFIGFILE" first, then restart the script";	
	exit 1
fi
